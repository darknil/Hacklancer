version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --notify-keyspace-events Ex
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redis_data:/data
    networks:
      - app-network

  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: bot
    depends_on:
      - redis
      - role-service
      - user-service
    ports:
      - '${BOT_PORT}:3000'
    env_file:
      - .env
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - USER_SERVICE_PORT=${USER_SERVICE_PORT}
      - USER_SERVICE_HOST=${USER_SERVICE_HOST}
    networks:
      - app-network

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - '${DB_PORT}:${DB_PORT}'
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    restart: always
    env_file:
      - .env
    depends_on:
      - postgres
    ports:
      - '${USER_SERVICE_PORT}:3000'
    volumes:
      - ./user-service:/app
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 10s
      timeout: 5s
      retries: 3

  role-service:
    build:
      context: ./role-service
      dockerfile: Dockerfile
    container_name: role-service
    restart: always
    env_file:
      - .env
    depends_on:
      - postgres
    ports:
      - '${ROLE_SERVICE_PORT}:3000'
    volumes:
      - ./user-service:/app
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  redis_data:
    driver: local
  pgdata:
    driver: local

networks:
  app-network:
    driver: bridge
